---
- name: Setup Local Talos Kubernetes Cluster with Cilium (Helm + CLI) and Flux CD
  hosts: localhost
  vars_prompt:
    - name: github_pat
      prompt: "Github PAT"
  vars:
    talos_version: "1.10.3"
    kubernetes_version: "1.33.1"
    hubble_version: "1.17.5"
    cluster_name: "Istari"
    flux_git_repo: "https://github.com/benjaminmnoer/iac.git"
    key_fp: "6B021152E518C20179D5558C51DE92958775C0C2"

  tasks:
    - name: Update system packages
      become: true
      pacman:
        update_cache: true
        upgrade: true

    - name: Install required pacman packages
      become: true
      pacman:
        name:
          - docker
          - kubectl
          - fluxcd
          - helm
          - jq
          - wget
          - cilium-cli
          - python-kubernetes
        state: present

    - name: Download Hubble
      become: true
      get_url:
        url: https://github.com/cilium/hubble/releases/download/v{{ hubble_version }}/hubble-linux-amd64.tar.gz
        dest: /tmp/hubble-linux-amd64.tar.gz
        mode: u=rwx,g=rx,o=rx
        owner: root
        group: root
        checksum: sha256:https://github.com/cilium/hubble/releases/download/v{{ hubble_version }}/hubble-linux-amd64.tar.gz.sha256sum

    - name: Install Hubble
      become: true
      unarchive:
        src: /tmp/hubble-linux-amd64.tar.gz
        dest: /usr/local/bin

    - name: Download talosctl checksums
      get_url:
        url: https://github.com/siderolabs/talos/releases/download/v{{ talos_version }}/sha256sum.txt
        dest: /tmp/talosctl-sha256sum.txt
        mode: u=rwx,g=rx,o=rx

    - name: Install talosctl
      become: true
      get_url:
        url: https://github.com/siderolabs/talos/releases/download/v{{ talos_version }}/talosctl-linux-amd64
        dest: /usr/local/bin/talosctl
        checksum: "sha256:{{ checksum[0].split()[0] }}"
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
      vars:
        checksum: '{{ lookup("file", "/tmp/talosctl-sha256sum.txt").splitlines() | select("match", ".*talosctl-linux-amd64$") | list }}'

    - name: Create Talos cluster without a default CNI
      command: >
        talosctl cluster create
        --name {{ cluster_name }}
        --kubernetes-version {{ kubernetes_version }}
        --config-patch @talos-patch.yaml
        --skip-k8s-node-readiness-check
        --controlplanes=1
        --workers=3
      register: talos_cluster
      changed_when: talos_cluster.rc == 0

    # - name: Create cilium namespace
    #   kubernetes.core.k8s:
    #     name: cilium
    #     api_version: v1
    #     kind: Namespace
    #     state: present
    #     definition:
    #       metadata:
    #         labels:
    #           pod-security.kubernetes.io/enforce: privileged

    - name: Install gateway CRDs
      command: kubectl apply -f "{{ item }}"
      loop:
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/standard/gateway.networking.k8s.io_gatewayclasses.yaml"
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/standard/gateway.networking.k8s.io_gateways.yaml"
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/standard/gateway.networking.k8s.io_httproutes.yaml"
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/standard/gateway.networking.k8s.io_referencegrants.yaml"
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/standard/gateway.networking.k8s.io_grpcroutes.yaml"
        - "https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/v1.2.0/config/crd/experimental/gateway.networking.k8s.io_tlsroutes.yaml"

    - name: Add Cilium Helm repository
      kubernetes.core.helm_repository:
        name: cilium
        repo_url: https://helm.cilium.io
        force_update: true

    - name: Install Cilium using Helm
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        release_namespace: kube-system
        create_namespace: true
        update_repo_cache: true
        chart_version: 1.17.5
        set_values:
          - value: ipam.mode=kubernetes
          - value: kubeProxyReplacement=true
          - value: securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}"
          - value: securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}"
          - value: cgroup.autoMount.enabled=false
          - value: cgroup.hostRoot=/sys/fs/cgroup
          - value: k8sServiceHost=localhost
          - value: k8sServicePort=7445
          - value: gatewayAPI.enabled=true
          - value: gatewayAPI.enableAlpn=true
          - value: gatewayAPI.enableAppProtocol=true
          - value: l2announcements.enabled=true
          - value: k8sClientRateLimit.qps=10
          - value: k8sClientRateLimit.burst=20
          - value: securityContext.privileged=true

    - name: Create a smb container
      community.docker.docker_container:
        name: smb-server
        image: dperson/samba
        restart_policy: always
        state: started
        networks:
          - name: "{{ cluster_name }}"
            aliases:
              - "smb-server"
        published_ports:
          - "139:139"
          - "445:445"
        volumes:
          - /Storage/smb-share/:/shares/:z
        command: '-s "Shares;/shares;yes;no;no;test" -u "test;test" -p'

    - name: Verify Cilium CLI is working
      command: cilium-cli status -n cilium --wait
      register: cilium_test
      changed_when: cilium_test.rc == 0

    - name: DNS test
      command: kubectl run -it --rm --restart=Never --image=busybox dns-test -- nslookup google.com
      register: dns_test
      changed_when: dns_test.rc == 0

    - name: Bootstrap Flux into Kubernetes
      command: >
        flux bootstrap github
        --owner="benjaminmnoer"
        --repository="iac"
        --branch="master"
        --path="clusters/staging"
        --personal
      register: flux_bootstrap
      changed_when: flux_bootstrap.rc == 0
      environment:
        GITHUB_TOKEN: "{{ github_pat }}"

    - name: Add decryption key
      shell: >
        set -o pipefail &&
        gpg --export-secret-keys --armor "{{ key_fp }}" |
        kubectl create secret generic sops-gpg
        --namespace=flux-system
        --from-file=sops.asc=/dev/stdin
      register: decryption_key
      changed_when: decryption_key.rc == 0
